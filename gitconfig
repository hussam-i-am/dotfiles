[color]
	diff = always
	status = always
	branch = always
	ui = always
[apply]
	whitespace = fix
[alias]
	ci = commit -v
	cia = commit -av
	st = status -sb -uall
	co = checkout
	dh = diff -w HEAD
	ds = diff HEAD --stat
	unstage = reset HEAD --
	untrack = rm --cached
	di = diff --cached
	du = !git diff `git merge-base HEAD origin/master`
	p = pull --stat
	pp = !git push && git pull
	recent = for-each-ref --count=10 --sort=-committerdate --format='%(refname:short) (%(committerdate:relative))' refs/heads/
	cor = !git for-each-ref --count=10 --sort=-committerdate --format='%(refname:short) (%(committerdate:relative))' refs/heads | fzf --reverse --nth=1 --preview 'git log --patch --color {1}...{1}~5' | awk '{print $1}' | xargs git checkout
	lg = log --color --graph --date=iso --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar - %ad) %C(blue)<%an>%Creset%n'
	lgb = log --color --graph --date=iso --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar - %ad) %C(blue)<%an>%Creset%n' --first-parent
	lgu = !git log --color --graph --date=iso --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar - %ad) %C(blue)<%an>%Creset%n' `git merge-base HEAD origin/master`..
	lgs = log --color --graph --date=iso --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar - %ad) %C(blue)<%an>%Creset%n%+b' --stat
	lgbs = log --color --graph --date=iso --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar - %ad) %C(blue)<%an>%Creset%n%+b' --first-parent --stat
	au = add -u
	f = fetch --all --prune
	ribbon = tag --force _ribbon origin/master
	catchup = log --patch --reverse --topo-order _ribbon..origin/master
	apply-commit = !git format-patch -1 --stdout $@ | git apply - --reject
	amend = commit --amend -v
	ca = commit --amend -v
	rc = rebase --continue
	ri = rebase --interactive
	riu = rebase --interactive @{upstream}
	s = stash
	sp = stash pop
	ap = add -p
	an = add -N
	lp = log -p
	ss = stash show -p
	ls = log -p -S
	cob = checkout -b
	sha = !git rev-parse --short HEAD | tee /dev/tty | tr -d '\n' | pbcopy
	bn = !git rev-parse --abbrev-ref HEAD | tee /dev/tty | tr -d '\n' | pbcopy
	clean-merged-branches = "!git branch --merged | grep -v '\\*\\|master' | xargs -n 1 git branch -d"
	mc = diff --name-status --diff-filter=U
	conflicts = diff --name-only --diff-filter=U
	log-all-simple = log --graph --all --color --pretty=\"%Cred%h%Creset -%Cblue%d%Creset %s\"
[core]
	excludesfile = ~/.gitignore
	autocrlf = input
[branch]
	autosetupmerge = true
	autosetuprebase = remote
[diff "ruby"]
	funcname = ^ *\\(\\(class\\|module\\|def\\) .*\\)
[diff]
	tool = opendiff
	algorithm = patience
	renames = copies
	mnemonicPrefix = 1
	compactionHeuristic = true
	indentHeuristic = true
	renameLimit = 3000
[merge]
	tool = opendiff
	conflictstyle = diff3
	ff = no
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[url "git@heroku.com:"]
	insteadOf = "heroku:"
[pull]
	rebase = true
[push]
	default = current
[include]
	path = code/gitconfig
	path = work/gitconfig
	path = .gitsecrets
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
[browser "gitscm"]
	cmd = /bin/sh -c 'open http://git-scm.com/docs/$(basename $1 .html)' --
[help]
	browser = gitscm
[advice]
	statusHints = false
[rerere]
	enabled = true
[credential]
	helper = osxkeychain
[user]
	name = Nathan Witmer
	email = nathan@zerowidth.com
[hub]
	protocol = https
[github]
	user = zerowidth
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[pager]
	; disabled diff-so-fancy and highlights for demos
	show = diff-so-fancy | less -RF
	diff = diff-so-fancy | less -RF
	log = diff-highlight | less -RF
	; log = diff-so-fancy | less -RF
	; show = diff-highlight | less -RF
	; diff = diff-highlight | less -RF
[interactive]
	diffFilter = diff-highlight
[rebase]
	autoStash = 1
[fetch]
	prune = true
